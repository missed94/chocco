/* 
const arrowLeft = $(".slider__arrow-left-wrapper");
const arrowRight = $(".slider_arrow-right-wrapper");
const carouselContent = $(".slider-content-list"); */

/* let moove = 0; */

(function() {
  function carousel(arrowRight, arrowLeft, moove, carouselContent) {

    let countChildrenElement = $(carouselContent).children('.slider-content-item').length;
  
  
    arrowRight.on("click", function () {
      moove -= 100;
  
      if (moove < -((countChildrenElement - 1) * 100)) {
        moove = 0;
      }
  
      return carouselContent.css("left", (moove + "%"));
    });
  
    arrowLeft.on("click", function () {
      moove += 100;
  
      if (moove > 0) {
        moove = -((countChildrenElement - 1) * 100);
        }
      
  
      return carouselContent.css("left", (moove + "%"));
    });
  
    
  }
  
  carousel(
    $(".slider_arrow-right-wrapper"),
    $(".slider__arrow-left-wrapper"),
    0,
    $(".slider-content-list")
  ); 
  
  
  /* const arrowLeft = document.querySelector(".slider__arrow-left-wrapper");
  const arrowRight = document.querySelector(".slider_arrow-right-wrapper");
  const carouselContent = document.querySelector(".slider-content-list");
  const carouselItem = document.querySelectorAll(".slider-content-item")
  
  let moove = 0;
  
  
  
  function carousel(arrowLeft, arrowRight, carouselContent, moove) {
  
  let countChildrenElement = $(carouselContent).children('.slider-content-item').length;
  
  
  arrowRight.addEventListener("click", function (e) {
  
    
  
    moove = moove - 100;
  
    if (moove < -((countChildrenElement - 1) * 100)) {
    moove = 0;
    }
  
  
    return carouselContent.style.left = moove + "%";
  });
  
  arrowLeft.addEventListener("click", function (event) {
  
    moove = moove + 100;
  
    if (moove > 0) {
    moove = -((countChildrenElement - 1) * 100);
    }
  
   
    return carouselContent.style.left = moove + "%";
  });
  
  
  }
  
  carousel(arrowLeft, arrowRight, carouselContent, 0, ) */
})()

 
;(function() {
  const hamburger = document.querySelector(".hamburger");
  const fullMenu = document.querySelector(".full-menu");
  const closeBtn = document.querySelector("#close-full-menu");
  const FullMenuItem = document.querySelectorAll(".full-menu-item");
  const wrapper = document.querySelector(".wrapper");
  
  hamburger.addEventListener("click", function (event) {
    fullMenu.style.left = "0";
  });
  
  closeBtn.addEventListener("click", function (event) {
    fullMenu.style.left = "100%";
  });
  
  FullMenuItem.forEach(function (element) {
    element.addEventListener("click", function (event) {
      fullMenu.style.left = "100%";
    });
  });
  
  fullMenu.addEventListener("click", function(e){
    if (e.target.className == 'full-menu') {
    fullMenu.style.left = "100%";
    }
  })
  
  window.addEventListener("resize", function (event) {
    if (event.currentTarget.innerWidth > 767) {
      fullMenu.style.left = "100%";
    }
  });
  
})()



;(function() {
  let myMap;

  const init = () => {
    myMap = new ymaps.Map("map", {
      // Координаты центра карты.
      // Порядок по умолчанию: «широта, долгота».
      // Чтобы не определять координаты центра карты вручную,
      // воспользуйтесь инструментом Определение координат.
      center: [55.03, 82.92],
      // Уровень масштабирования. Допустимые значения:
      // от 0 (весь мир) до 19.
      zoom: 16,
      controls:[]
  });
  
  const coords = [
    [55.030439, 82.924504],
    [55.028631, 82.918379],
    [55.031376, 82.917726]
  ];
  
  
  var myCollection = new ymaps.GeoObjectCollection({},{
  
    draggable: false,
    iconLayout: 'default#image',
    iconImageHref: './icons/icon_map.svg',
      iconImageSize: [46, 57],
      iconImageOffset: [-35, -52]
  });
  
  coords.forEach(coord => {
    myCollection.add(new ymaps.Placemark(coord))
  });
  
  myMap.geoObjects.add(myCollection);
  
  myMap.behaviors.disable('scrollZoom');
  
  }
  
  ymaps.ready(init);
})()



;(function() {
  const validateFields = (form, fieldsArray) => {
    fieldsArray.forEach((field) => {
      field.removeClass("input-error");
  
      if (field.val().trim() == "") {
        field.addClass("input-error");
      }
    });
  
    const errorFields = form.find(".input-error");
    return errorFields.length == 0;
  };
  
  $(".form").submit((e) => {
    e.preventDefault();
  
    const form = $(e.currentTarget);
    const name = form.find("[name='name']");
    const phone = form.find("[name='phone']");
    const comment = form.find("[name='comment']");
    const to = form.find("[name='to']");
  
    const modal = $("#modal");
    const content = modal.find(".modal__content");
  
    modal.removeClass("modal-error");
  
    const isValid = validateFields(form, [name, phone, comment, to]);
  
    if (isValid) {
      const request = $.ajax({
        url: "https://webdev-api.loftschool.com/sendmail",
        method: "post",
        data: {
          name: name.val(),
          phone: phone.val(),
          comment: comment.val(),
          to: to.val(),
        },
      });
  
      request.done((data) => {
        content.text(data.message);
      });
  
      request.fail((data) => {
        const message = data.responseJSON.message;
        content.text(message);
        modal.addClass("modal-error");
      });
  
      request.always(() => {
        $.fancybox.open({
          src: "#modal",
          type: "inline",
        });
      });
    }
  });
  
  $(".app-close-modal").click((e) => {
    e.preventDefault();
  
    $.fancybox.close();
  });
})()



;(function () {
  const sections = $("section");
  const display = $(".main__content");
  const sideMenu = $(".fixed-menu");
  const sideMenuItems = sideMenu.find(".fixed-menu__item");

  const mobileDetect = new MobileDetect(window.navigator.userAgent);
  const isMobile = mobileDetect.mobile();

  let inScroll = false;

  sections.first().addClass("active");

  const countSectionPosition = (sectionEq) => {
    const position = sectionEq * -100;

    if (isNaN(position)) {
      console.error("передано неверное значение в countSectionPosition");
      return 0;
    }

    return position;
  };

  const resetActiveClassForItem = (items, itemEq, activeClass) => {
    items.eq(itemEq).addClass(activeClass).siblings().removeClass(activeClass);
  };

  //функция запускающая анимацию
  const performTransition = (sectionEq) => {
    if (inScroll) return;

    inScroll = true;
    const position = countSectionPosition(sectionEq);

    display.css({
      transform: `translateY(${position}%)`,
    });

    resetActiveClassForItem(sections, sectionEq, "active");

    setTimeout(() => {
      inScroll = false;
      resetActiveClassForItem(
        sideMenuItems,
        sectionEq,
        "fixed-menu__item_active"
      );
    }, 1500);
  };

  // функция определяюзаяя к какой секции скролить
  const viewportScroller = () => {
    const activeSection = sections.filter(".active");
    const nextSection = activeSection.next();
    const prevSection = activeSection.prev();

    return {
      next() {
        if (nextSection.length) {
          performTransition(nextSection.index());
        }
      },

      prev() {
        if (prevSection.length) {
          performTransition(prevSection.index());
        }
      },
    };
  };

  $(window).on("wheel", (e) => {
    const deltaY = e.originalEvent.deltaY;
    const scroller = viewportScroller();
    if (deltaY > 0) {
      scroller.next();
    }

    if (deltaY < 0) {
      scroller.prev();
    }
  });

  $(window).on("keydown", (e) => {
    const tagName = e.target.tagName.toLowerCase();
    const userTypingInInputs = tagName == "input" || tagName == "textarea";
    const scroller = viewportScroller();

    if (userTypingInInputs) return;

    switch (e.keyCode) {
      case 40: //prev
        scroller.next();
        break;

      case 38: //next
        scroller.prev();
        break;
    }
  });

  $(".wrapper").on("touchmove", (e) => {
    e.preventDefault();
  });

  $("[data-scroll-to]").click((e) => {
    e.preventDefault();

    const $this = $(e.currentTarget);
    const target = $this.attr("data-scroll-to");
    const reqSection = $(`[data-section-id = ${target}]`);

    performTransition(reqSection.index());
  });

  /* if (isMobile) {
    $("body").swipe( {
      //Generic swipe handler for all directions
      swipe:function(event,direction) {
        
       const scroller = viewportScroller(); 
       let scrollDirection = "";
       
    
       if (direction == "up") scrollDirection = "next";
       if (direction == "down") scrollDirection = "prev";
    
       scroller[scrollDirection]();
    }
    })
  
  }
   */
  if (isMobile) {
    $("body").swipe({
      swipe: function (event, direction) {
        const scroller = viewportScroller();
        let scrollDirection = "";
        if (direction == "up") {
          scrollDirection = "next";
        }

        if (direction == "down") {
          scrollDirection = "prev";
        }

        scroller[scrollDirection]();
      },
    });
  }
})();

;(function() {
//объявляем переменные:

//переменная с круглыми аватарками


const avatars = $('.interactive-avatar');

const displayInner = $('.rewievs__display-inner');


/* const avatars = $('[data-from]');

const displayInner = $('[data-to]');



avatars.on('click', e => {
    e.preventDefault();
    const $this = $(e.currentTarget);

    const displayInnerData = displayInner

    avatars.removeClass('interactive-avatar_active');


    if ($this.hasClass('interactive-avatar')) {
        $this.addClass('interactive-avatar_active')
    }



})  */





//объявляем цикл который перебирает все круглые аватарки
for (let i = 0; i < avatars.length; i++) {
    //присваиваем элементу цикла(конкретной аватрке) переменную элемент
    let element = avatars[i];

    //создаем событие клика на аватарку и функцию которая выполняется при клике
    element.addEventListener("click", function (e) {

        //Внтури функции:

        //отменяем стандартное действие браузера при клике на элемент(ссылка)
        e.preventDefault()

        //снова объявляем цикл который перебирает все круглые аватарки
        for (let index = 0; index < avatars.length; index++) {

            //убираем активный класс всем аватаркам при клике, на тех на которых он есть
            avatars[index].classList.remove('interactive-avatar_active')
            //убираем активный класс дисплею при клике, на тех на которых он есть
            displayInner[index].classList.remove('rewievs__display-inner_active')

        }
        //присваиваем активный класс аватарке, на которурую произвели клик
        displayInner[i].classList.add('rewievs__display-inner_active');
        //присваиваем активный класс дисплею
        e.currentTarget.classList.add('interactive-avatar_active');
    })
}




/* function change(target, 
                i, 
                avatars,
                displayInner, 
                avatarsActive, 
                displayInnerActive, 
                e) {

    e.preventDefault();

    for (let index = 0; 
         index < avatars.length; 
         index++) {

        avatars[index].classList.remove(avatarsActive)
        displayInner[index].classList.remove(displayInnerActive)
    }

    displayInner[i].classList.add(displayInnerActive);
    target.classList.add(avatarsActive);
};



for (let i = 0; 
     i < avatars.length; 
     i++) {

    let element = avatars[i];

    element.addEventListener("click", function (e) {
        
    change( e.currentTarget, 
            i, 
            avatars, 
            displayInner, 
            'interactive-avatar_active', 
            'rewievs__display-inner_active',
            e)
    })
} */
})()


;(function() {
const openItem = function (item) {
  const container = item.closest(".teammate-item");
  const contentBlock = container.find(".position-wrapper");
  const textBLock = contentBlock.find(".position");
  const reqHeight = textBLock.height();
  const arrow = container.find(".team__desc-arrow-img");

  container.addClass("teammate-item_active");
  arrow.addClass("team__desc-arrow-img_active");

  contentBlock.height(reqHeight);
};




const closeEveryItem = function (container) {
  const items = container.find(".position-wrapper");
  const itemContainer = container.find(".teammate-item");
  const itemArrow = container.find(".team__desc-arrow-img");
  items.height(0);

  itemArrow.removeClass("team__desc-arrow-img_active");
  itemContainer.removeClass("teammate-item_active");
};




$(".teammate-name-wrapper").on("click", function (e) {
  const $this = $(e.currentTarget);
  const container = $this.closest(".team");
  const elemContainer = $this.closest(".teammate-item");

  if (elemContainer.hasClass("teammate-item_active")) {
    closeEveryItem(container);
  } else {
    closeEveryItem(container);
    openItem($this);
  }
});

/* const items = $('.teammate-name-wrapper');
const positionWrapper = $('.position-wrapper');
const arrow = $('.team__desc-arrow-img');

items.each((i,item) => {

$(item).on('click', function (e) {

  items.each((j,elem) =>  {

    if (j != i) {
      $(positionWrapper[j]).removeClass('position-wrapper_active');
      $(arrow[j]).removeClass('team__desc-arrow-img_active');
       }

  })
  
    $(positionWrapper[i]).toggleClass('position-wrapper_active');
    $(arrow[i]).toggleClass('team__desc-arrow-img_active');
    
  })

}) */

/* const items = document.querySelectorAll('.teammate-name-wrapper');
const positionWrapper = document.querySelectorAll('.position-wrapper');
const arrow = document.querySelectorAll('.team__desc-arrow-img');


for (let i = 0; i < items.length; i++) {

  let element = items[i];

  element.addEventListener("click", function (e) { 

    for (let j = 0; j < items.length; j++) {


    if (j != i) {
    positionWrapper[j].classList.remove('position-wrapper_active');
    arrow[j].classList.remove('team__desc-arrow-img_active');
     }


    }

    positionWrapper[i].classList.toggle('position-wrapper_active');
    arrow[i].classList.toggle('team__desc-arrow-img_active');
    
    

  })

} */

})()



/* const openAcco = (item) => {

item.addClass("acco-item_active");

}



const closeAcco = (list) => {

  const listItem = list.find(".acco-item"); 
  listItem.removeClass("acco-item_active");

  }


$(".acco-title-wrapper").on('click', (e) => {
    e.preventDefault();
    const $this = $(e.currentTarget);
    const itemContainer = $this.closest(".acco-item");
    const accoList = itemContainer.closest(".acco-list");
    
if (itemContainer.hasClass("acco-item_active")) {
    closeAcco(accoList);



} else {
    closeAcco(accoList);
    openAcco(itemContainer);

    }
}) */





;(function() {


  const maxWidth = document.body.clientWidth;
  console.log(maxWidth);

  
  const openAcco = (item) => {
    item.addClass("acco-item_active");
    
  };
  
  const closeAcco = (list) => {
    const listItem = list.find(".acco-item");
    listItem.removeClass("acco-item_active");
  };
  
  
  
  $(".acco-item").on("click", (e) => {
    e.preventDefault();
    let $this = $(e.target);
    

    if (maxWidth > 480) {
      if ($(e.target).hasClass("acco-title-wrapper") || $(e.target).hasClass("acco-title")) {
        
        const itemContainer = $this.closest(".acco-item");
        const accoList = itemContainer.closest(".acco-list");
    
    
        if (itemContainer.hasClass("acco-item_active")) {
          closeAcco(accoList);
        } else {
          closeAcco(accoList);
          openAcco(itemContainer);
        }
      }
    
      if ($(e.target).hasClass("close-x") || $(e.target).hasClass("close-vert-menu")) {
        const target = $(e.target);
        const Items = target.closest(".acco-list");
    
        closeAcco(Items)
      } else {
        let $this = $(e.currentTarget);
console.log($this.html());
      }
    } 
    
    
  
    
  });
  
})()


;(function() {
  const player = $(".player-elem")[0];
  const playerContainer = $(".player");
  
  $(".play-stop").click((e) => {
    e.preventDefault();
  
    if (playerContainer.hasClass("player_paused")) {
      playerContainer.removeClass("player_paused");
      playerContainer.removeClass("player_active");
      player.pause();
    } else {
      playerContainer.addClass("player_paused");
      player.play();
    }
  });
  
  $(".playback__slider-line").click((e) => {
    const line = $(e.currentTarget);
    const clickedPos = e.originalEvent.layerX;
    const newBtnPosPrecent = (clickedPos / line.width()) * 100;
  
    $(".playback__btn").css({
      left: `${newBtnPosPrecent}%`,
    });
  
    player.pause();
    player.currentTime = player.duration * (clickedPos / line.width());
    player.play();
    playerContainer.addClass("player_paused");
  });
  
  $(player).on("timeupdate", function () {
    let playBackBtn = $(".playback__btn");
    let timeProgress = (player.currentTime / player.duration) * 100 + "%";
    playBackBtn.css("left", timeProgress);
  });
  
  $(".volume__slider-line").click((e) => {
    const volumeLine = $(e.currentTarget);
    const volumeClickedPos = e.originalEvent.layerX;
  
    const volBtnPosPrecent = (volumeClickedPos / volumeLine.width()) * 100;
  
    $(".volume__slider-btn").css({
      left: `${volBtnPosPrecent}%`,
    });
    player.volume = volBtnPosPrecent / 100;
  
    if (playerContainer.hasClass("player__sound-off")) {
      playerContainer.removeClass("player__sound-off");
      player.muted = false;
    }
  });
  
  $(".player-elem").on("play", (e) => {
    playerContainer.addClass("player_active ");
  });
  
  $(".player-splash").on("click", (e) => {
    playerContainer.addClass("player_active player_paused");
    player.play();
  });
  
  $(".volume__icons-wrapper").on("click", (e) => {
    if (playerContainer.hasClass("player__sound-off")) {
      playerContainer.removeClass("player__sound-off");
      player.muted = false;
    } else if ($(e.target).filter("close")) {
      playerContainer.addClass("player__sound-off");
      player.muted = true;
    }
  
  });
  
})()




//# sourceMappingURL=data:application/json;charset=utf8;base64,
